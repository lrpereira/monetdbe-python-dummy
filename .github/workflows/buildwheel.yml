name: Build wheel
# Build a wheel for a specific Python version on a specific platform.
#
# Looks at the version number to determine which MonetDB version to include.
# We plan to extend the install-monetdb action to install MonetDB from source.
# When that happens, this workflow will also support this. Not sure yet which
# version number to use in that case, though.

on:
  # This workflow is intended to be invoked from other workflows
  workflow_call:
    inputs:
      python_version:
        description: "Python version to build for, passed to the setup-python action"
        type: string
        required: true
      runs-on:
        description: "Runner to build on, passed to runs-on setting. Defaults to 'ubuntu-latest'"
        type: string
        required: false
        default: ''
      container:
        description: "Container to build in. Only works on Ubuntu runners."
        type: string
        required: false
        default: ''
      artifact-name:
        description: Passed to actions/upload-artifact as the name to upload results to. Leave empty to suppress
        type: string
        required: true
        default: ''
      retention-days:
        description:  Passed to actions/upload-artifact as the number of days the artifact stays alive. Default is 3.
        type: number
        required: false
        default: 3
      manylinux-glibc-version:
        description: Maximum allowed Glibc version on manylinux, for example 2.28
        type: string
        required: false
        default: ''
    outputs:
      artifact-name:
        description: Artifact name used, copied from input of the same name
        value: ${{ inputs.artifact-name }}
      artifact-url:
        description: URL of uploaded artifact, if any
        value: ${{ jobs.build.outputs.artifact-url }}
      artifact-id:
        description: id of uploaded artifact, if any
        value: ${{ jobs.build.outputs.artifact-id }}

jobs:

  build:
    # We use this matrix only to have a place where we can construct the json
    # expression for 'container_json'.
    #
    # - no container: null
    # - with container: { "image": "the-container"}
    #
    # Going through a json string seems to be the only way to make the whole
    # container setting optional. Feel free to simplify if you know how.
    strategy:
      matrix:
        include:
          - runner: ${{ inputs.runs-on || 'ubuntu-latest' }}
            container_json: ${{ inputs.container && format('{"image":"{0}"}', inputs.container) || 'null' }}
    runs-on: ${{ matrix.runner }}
    container: ${{ fromJSON(matrix.container_json) }}
    outputs:
      artifact-url: ${{ steps.upload.outputs.artifact-url }}
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
    steps:

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - uses: actions/checkout@v4

      - name: Decide which version of MonetDB to include
        id: decide_monetdb_version
        # The script prints 'monetdb_version=XYZ'
        run: |
          type -P python
          type -P python3
          python3 scripts/monetdb-version-to-embed.py
          scripts/monetdb-version-to-embed.py >>"$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
        shell: bash

      - name: Install MonetDB
        id: install_monetdb
        uses: lrpereira/install-monetdb@main
        with:
          version: "${{ steps.decide_monetdb_version.outputs.monetdb_version }}"

      - name: Build
        env:
          MONETDBE_INCLUDE_PATH: ${{ steps.install_monetdb.outputs.includedir }}
          MONETDBE_LIBRARY_PATH: ${{ steps.install_monetdb.outputs.libdir }}
          MONETDBE_BINARY_PATH: ${{ steps.install_monetdb.outputs.bindir }}
        run: |
          echo '== enter venv =='
          python3 -m venv "$RUNNER_TEMP"/venv
          . "$RUNNER_TEMP"/venv/bin/activate
          echo '== install ci-requirements =='
          pip install -r ci-requirements.txt
          python3 scripts/do-everything.py -d wheelhouse ${{ inputs.manylinux-glibc-version && format('--manylinux="{0}"', inputs.manylinux-glibc-version) || ''}}
          echo '== script completed succesfully =='
          ls -l wheelhouse
        shell: bash

      - name: Store results
        id: upload
        if: inputs.artifact-name != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: wheelhouse
          retention-days: ${{ inputs.retention-days }}


