name: Build binary wheels
# Build wheels for various platforms and Python versions,
# optionally upload them to pypi

on:
  push:

jobs:

  # Run the tests and upload an sdist
  preflight:
    runs-on: ubuntu-latest
    outputs: # use these to control the other jobs
      magic: magic002
      continue-on-error: true
      run-tests: true
      pythons: '[ "3.13", "3.12", "3.11", "3.10", "3.9", "3.8" ]'
    steps:

      - uses: actions/checkout@v4

      - id: pickcachehash
        # prints 'hash=0FABC...'
        run: |
          python3 scripts/hash-source.py >>$GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache
        with:
          path: dist
          key: cache-42-${{ steps.pickcachehash.outputs.hash }}

      - id: install
        if: (!steps.cache.outputs.cache-hit)
        uses: ./actions/install-correct-monetdb-version

      - name: Build sdist
        if: (!steps.cache.outputs.cache-hit)
        env:
          MONETDBE_INCLUDE_PATH: ${{ steps.install.outputs.includedir }}
          MONETDBE_LIBRARY_PATH: ${{ steps.install.outputs.libdir }}
        run: |
          pip install --upgrade build
          python3 -m build --sdist
          ls dist

      - name: Run tests
        if: (!steps.cache.outputs.cache-hit)
        env:
          MONETDBE_INCLUDE_PATH: ${{ steps.install.outputs.includedir }}
          MONETDBE_LIBRARY_PATH: ${{ steps.install.outputs.libdir }}
        run: |
          pip install --upgrade pip
          echo '========'
          pip install -e '.[test]'
          pytest -v

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 3


  # Use the manylinux container to ensure it works with old glibc versions.
  # Manylinux comes with all relevant Python versions preinstalled.
  linux:
    needs: preflight
    # if: false
    continue-on-error: ${{ fromJSON(needs.preflight.outputs.continue-on-error) }}
    strategy:
      matrix:
        python: ${{ fromJSON(needs.preflight.outputs.pythons) }}
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: sdist

      - id: pickcachehash
        # prints 'sdist-hash=0F1234'
        run: |
          python3 scripts/hash-sdist.py sdist/*.tar.gz >>$GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache
        with:
          path: wheels
          key: cache-${{needs.preflight.outputs.magic}}x001-manylinux${{ matrix.python }}-${{ steps.pickcachehash.outputs.sdist-hash }}-${{ hashFiles('scripts/do-everything.py')}}

      - uses: ./actions/install-correct-monetdb-version
        if: (!steps.cache.outputs.cache-hit)
        id: installmonet

      - name: Build wheel
        if: (!steps.cache.outputs.cache-hit)
        run: |
          python${{ matrix.python }} scripts/do-everything.py \
            -s sdist/*.tar.gz \
            -d wheels \
            --wheel \
            --manylinux=2.28 \
            --inc-dir="${{ steps.installmonet.outputs.includedir }}" \
            --lib-dir="${{ steps.installmonet.outputs.libdir }}"

      - name: Test the wheel
        if: (!steps.cache.outputs.cache-hit && needs.preflight.outputs.run-tests)
        run: |
          set -x
          rm "${{ steps.installmonet.outputs.libdir}}/"*monetdbe.*
          mkdir testtesttest
          cd testtesttest
          python${{ matrix.python }} -m venv venv
          WHEEL="$(echo ../wheels/*.whl)"
          ./venv/bin/pip install "${WHEEL}[test]"
          cp -r ../tests .
          ./venv/bin/pytest -v tests

      - uses: actions/upload-artifact@v4
        with:
          name: manylinux-${{ matrix.python }}
          path: wheels/*.whl


  macos:
    needs: preflight
    # if: false
    continue-on-error: ${{ fromJSON(needs.preflight.outputs.continue-on-error) }}
    strategy:
      matrix:
        arch: [ "arm", "intel" ]
        python: ${{ fromJSON(needs.preflight.outputs.pythons) }}
        exclude:
          - python: "3.8"   # not supported by homebrew
    runs-on: ${{ matrix.arch == 'intel' && 'macos-13' || 'macos-14'}}
    steps:

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: sdist

      - id: pickcachehash
        # prints 'sdist-hash=0F1234'
        run: |
          python3 scripts/hash-sdist.py sdist/*.tar.gz >>$GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache
        with:
          path: wheels
          key: cache-${{needs.preflight.outputs.magic}}x001-${{ runner.os}}-${{ matrix.arch }}-${{ matrix.python }}-${{ steps.pickcachehash.outputs.sdist-hash }}-${{ hashFiles('scripts/do-everything.py')}}

      # Install Python from Homebrew.
      #
      # The repair / delocate phase of the build step below does not work if the
      # Python interpreter is a 'universal2' binary (x86 and arm64
      # simultaneously). The setup-python action always installs a universal2
      # binary so we cannot use it to build. Homebrew has the policy to always
      # build single-architecture binaries but nevertheless, some macos runners
      # come with universal2 Homebrew Python interpreters. For example
      # python3.12 and 3.13 on macos-13 (Intel).
      #
      # Running 'brew reinstall' rather than 'brew install' fixes this but
      # sometimes fails due to symlinking errors. Running 'brew link
      # --overwrite' afterward seems to be sufficient.
      - name: Install Python ${{ matrix.python }}
        if: (!steps.cache.outputs.cache-hit)
        run: |
          set -x
          brew update
          echo '=========='
          # Reinstall has no --overwrite flag so if it fails we try to overwrite
          brew reinstall python@${{ matrix.python }} || \
            brew link --overwrite python@${{ matrix.python }}
          type -p python${{ matrix.python }}
          file $(brew --prefix)/bin/python${{ matrix.python }}

      - uses: ./actions/install-correct-monetdb-version
        if: (!steps.cache.outputs.cache-hit)
        id: installmonet

      - name: Build wheel
        if: (!steps.cache.outputs.cache-hit)
        run: |
          $(brew --prefix)/bin/python${{ matrix.python }} scripts/do-everything.py \
            -s sdist/*.tar.gz \
            -d wheels \
            --wheel \
            --inc-dir="${{ steps.installmonet.outputs.includedir }}" \
            --lib-dir="${{ steps.installmonet.outputs.libdir }}"

      - name: Test the wheel
        if: (!steps.cache.outputs.cache-hit && needs.preflight.outputs.run-tests)
        run: |
          set -x
          mkdir testtesttest
          cd testtesttest
          rm "${{ steps.installmonet.outputs.libdir}}/"*monetdbe.*
          python${{ matrix.python }} -m venv venv
          WHEEL="$(echo ../wheels/*.whl)"
          ./venv/bin/pip install "${WHEEL}[test]"
          cp -r ../tests .
          ./venv/bin/pytest -v tests

      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-${{ matrix.python }}
          path: wheels/*.whl

  windows:
    needs: preflight
    # if: false
    continue-on-error: ${{ fromJSON(needs.preflight.outputs.continue-on-error) }}
    strategy:
      matrix:
        python: ${{ fromJSON(needs.preflight.outputs.pythons) }}
        exclude:
          # The versions we get of Python 3.8, 3.9 and 3.10 are too old.
          # They don't support the filter= keyword argument to shutil.unpack_archive() yet.
          # This was introduced in Python 3.8.17, 3.9.17 and 3.10.12.
          # See https://github.com/actions/setup-python/issues/978.
          - python: "3.8"
          - python: "3.9"
          - python: "3.10"
    runs-on: windows-2019 # also referred to in the cache key below
    steps:

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: sdist

      - id: pickcachehash
        # prints 'sdist-hash=0F1234'
        run: |
          python3 scripts/hash-sdist.py sdist/*.tar.gz >>$GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
        shell: bash

      - uses: actions/cache@v4
        id: cache
        with:
          path: wheels
          key: cache-${{needs.preflight.outputs.magic}}x002-windows2019-${{ matrix.python }}-${{ steps.pickcachehash.outputs.sdist-hash }}-${{ hashFiles('scripts/do-everything.py')}}

      - uses: actions/setup-python@v5
        if: (!steps.cache.outputs.cache-hit)
        with:
          python-version: ${{ matrix.python }}
          check-latest: true

      - uses: ./actions/install-correct-monetdb-version
        if: (!steps.cache.outputs.cache-hit)
        id: installmonet

      - name: Build wheel
        if: (!steps.cache.outputs.cache-hit)
        run: |
          python --version
          python scripts/do-everything.py \
            -s sdist/*.tar.gz \
            -d wheels \
            --wheel \
            --manylinux=2.28 \
            --inc-dir="${{ steps.installmonet.outputs.includedir }}" \
            --lib-dir="${{ steps.installmonet.outputs.libdir }}"
        shell: bash

      - name: Test the wheel
        if: (!steps.cache.outputs.cache-hit && needs.preflight.outputs.run-tests)
        run: |
          set -x
          mkdir testtesttest
          cd testtesttest
          rm "${{ steps.installmonet.outputs.bindir}}"/bin/monetdbe.dll
          python -m venv venv
          WHEEL="$(echo ../wheels/*.whl)"
          ./venv/Scripts/pip install "${WHEEL}[test]"
          cp -r ../tests .
          ./venv/Scripts/pytest -v tests
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.python }}
          path: wheels/*.whl



  gather:
    runs-on: ubuntu-latest
    needs: [ 'linux', 'macos', 'windows' ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - run: |
          mkdir gathered
          mv -v artifacts/*/*.tar.gz artifacts/*/*.whl gathered/
          ls -lR gathered

      - uses: actions/upload-artifact@v4
        with:
          path: gathered
          name: all-wheels
